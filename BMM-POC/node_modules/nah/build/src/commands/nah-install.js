"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process = require("child_process");
const crypto = require("crypto");
const os = require("os");
const node_fetch_1 = require("node-fetch");
const infoBuilder = require("../lib/info_builder");
const log = require("../lib/log");
const remoteStorage = require("../lib/remote_storage");
const storage = require("../lib/storage");
const resolver = require("../lib/version_resolver");
function downloadFile(uri) {
    return node_fetch_1.default(uri)
        .then((response) => {
        if (!response.ok) {
            throw new Error(`Received HTTP "${response.status}" from the server.`);
        }
        return response;
    })
        .then((response) => response.buffer());
}
function downloadChecksum(uri) {
    return __awaiter(this, void 0, void 0, function* () {
        log.info(`Downloading checksum from "${uri}"...`);
        return (yield downloadFile(uri)).toString("utf-8");
    });
}
function downloadArchive(uri) {
    log.info(`Downloading archive from "${uri}"...`);
    return downloadFile(uri);
}
function findChecksum(filename, checksum) {
    const lines = checksum.split("\n");
    for (const line of lines) {
        const [sha, name] = line.split("  ");
        if (name === filename) {
            return sha;
        }
    }
    return null;
}
function verifyChecksum(filename, checksum, archive) {
    const sum = findChecksum(filename, checksum);
    if (!sum) {
        throw new Error("Unable to find the corresponding filename in the shasum file.");
    }
    const hash = crypto.createHash("sha256").update(archive).digest("hex");
    if (sum !== hash) {
        throw new Error("The archive is corrupted. Please retry.");
    }
}
function runPostInstallHook() {
    const postInstallHookPath = storage.hook("post_install");
    child_process.spawnSync("sh", [postInstallHookPath], {
        stdio: "inherit",
    });
}
function installVersion(ver) {
    return __awaiter(this, void 0, void 0, function* () {
        log.info('Version "%s" is not yet installed. Installing...', ver.human);
        const info = infoBuilder.build(ver);
        try {
            const checksum = yield downloadChecksum(info.uris.checksum);
            const archive = yield downloadArchive(info.uris.archive);
            log.info("Verifying checksum...");
            verifyChecksum(info.filename, checksum, archive);
            log.info("Extracting...");
            yield storage.installVersion(ver, info.name, archive);
            log.info("Setting as current...");
            storage.makeCurrent(ver);
            if (os.platform() !== "win32") {
                log.info("Running the post-install hook...");
                runPostInstallHook();
            }
            else {
                log.info("Skipping the post-install hook because of an unsupported platform");
            }
            log.info("Finished");
        }
        catch (err) {
            log.error(`An error occured while installing: ${err}`);
        }
    });
}
function handle(version) {
    return __awaiter(this, void 0, void 0, function* () {
        storage.initialize();
        const resolvedVersion = yield resolver.resolve(version, remoteStorage);
        if (storage.version(resolvedVersion)) {
            log.info('Version "%s" is already installed.', resolvedVersion.human);
            log.info("Setting as current...");
            return storage.makeCurrent(resolvedVersion);
        }
        yield installVersion(resolvedVersion);
    });
}
exports.command = "install <version>";
exports.aliases = ["i"];
exports.desc = "Install a specific version of Node.js";
function builder(yargs) {
    yargs.usage("Usage: nah install <version>");
}
exports.builder = builder;
function handler({ version }) {
    handle(version).catch((err) => {
        log.error("An unexpected error occured: ", err);
        process.exitCode = 1;
    });
}
exports.handler = handler;
//# sourceMappingURL=nah-install.js.map