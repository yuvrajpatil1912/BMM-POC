"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const log = require("../lib/log");
const print_versions_1 = require("../lib/print_versions");
const remoteStorage = require("../lib/remote_storage");
const storage = require("../lib/storage");
function handle(channel) {
    return __awaiter(this, void 0, void 0, function* () {
        storage.initialize();
        try {
            const versions = yield remoteStorage.versions(channel);
            log.info("Available: ");
            print_versions_1.default(versions, ".", ".x.x", process.stdout);
        }
        catch (err) {
            log.error(`An error occured while fetching the channel's versions: ${err.message}`);
        }
    });
}
exports.command = "ls-remote <channel>";
exports.desc = "Prints all of the available versions for the given channel.";
function builder(yargs) {
    yargs.usage("Usage: nah ls-remote release (or nightly, rc...)");
}
exports.builder = builder;
function handler({ channel }) {
    handle(channel).catch((err) => {
        log.error("An unexpected error occured: ", err);
        process.exitCode = 1;
    });
}
exports.handler = handler;
//# sourceMappingURL=nah-ls-remote.js.map