"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process = require("child_process");
const log = require("../lib/log");
const storage = require("../lib/storage");
const resolver = require("../lib/version_resolver");
function removeEntry(entry, path) {
    return path
        .split(":")
        .filter((part) => part !== entry)
        .join(":");
}
function prependEntry(entry, path) {
    const parts = path.split(":");
    parts.unshift(entry);
    return parts.join(":");
}
// TODO: If no version was provided, it could look for .nahrc files in the tree
// to determine the version.
function handle(version) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const resolvedVersion = yield resolver.resolve(version);
            const commands = process.argv.slice(4);
            if (!commands.length) {
                return;
            }
            if (storage.version(resolvedVersion)) {
                const versionPath = storage.which(resolvedVersion);
                const current = storage.current();
                if (current) {
                    process.env.PATH = removeEntry(`${current.path}/bin`, process.env.PATH);
                }
                process.env.PATH = prependEntry(`${versionPath}/bin`, process.env.PATH);
                const executable = commands[0];
                const args = commands.slice(1);
                child_process.spawn(executable, args, {
                    detached: true,
                    shell: true,
                    stdio: "inherit",
                });
            }
            else {
                log.error('Version "%s" is not installed yet. Use "nah install" to install it.', resolvedVersion.human);
            }
        }
        catch (err) {
            // TODO: Be more granular
            log.error(err.message);
        }
    });
}
exports.command = "exec <version>";
exports.aliases = ["e"];
exports.desc = "Executes the command with the given Node.js version";
function builder(yargs) {
    yargs.usage("Usage: nah exec <version>");
}
exports.builder = builder;
function handler({ version }) {
    handle(version).catch((err) => {
        log.error("An unexpected error occured: ", err);
        process.exitCode = 1;
    });
}
exports.handler = handler;
//# sourceMappingURL=nah-exec.js.map