"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const log = require("../lib/log");
const remoteStorage = require("../lib/remote_storage");
const storage = require("../lib/storage");
const resolver = require("../lib/version_resolver");
function setCurrentVersion(version) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const resolvedVersion = yield resolver.resolve(version, remoteStorage);
            if (storage.version(resolvedVersion)) {
                storage.makeCurrent(resolvedVersion);
            }
            else {
                log.error('Version "%s" is not installed yet. Use "nah install" to install it.', resolvedVersion.human);
            }
        }
        catch (err) {
            log.error(err.message);
        }
    });
}
function printCurrentVersion() {
    const current = storage.current();
    if (current) {
        log.info('The current version is set to "%s" and located at "%s".', current.human, current.path);
    }
    else {
        log.info('There\'s no version currently set. Use "install" or "current" to set one.');
    }
}
function handle(argv) {
    return __awaiter(this, void 0, void 0, function* () {
        storage.initialize();
        if (argv.version) {
            yield setCurrentVersion(argv.version);
        }
        else {
            printCurrentVersion();
        }
    });
}
exports.command = "current [version]";
exports.aliases = ["version", "use", "c"];
exports.desc = "Print or set the current version";
function builder(yargs) {
    yargs.usage("Usage: nah current");
}
exports.builder = builder;
function handler(argv) {
    handle(argv).catch((err) => {
        log.error("An unexpected error occured: ", err);
        process.exitCode = 1;
    });
}
exports.handler = handler;
//# sourceMappingURL=nah-current.js.map