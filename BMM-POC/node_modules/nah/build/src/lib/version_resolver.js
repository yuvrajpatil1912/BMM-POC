"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
function result(channel, version) {
    return {
        channel,
        full: `${channel}--${version}`,
        human: `${channel}/${version}`,
        version,
    };
}
function resolveLatestVersion(channel, remoteStorage) {
    return __awaiter(this, void 0, void 0, function* () {
        const latest = yield remoteStorage.latest(channel);
        if (!latest) {
            throw new Error(`Unable find a latest version for channel "${channel}".`);
        }
        return result(channel, latest);
    });
}
function parseVersion(channel, version, remoteStorage) {
    return __awaiter(this, void 0, void 0, function* () {
        if (version === "latest" && remoteStorage) {
            return resolveLatestVersion(channel, remoteStorage);
        }
        if (version.length > 1 && version.indexOf("-") !== -1) {
            return result(channel, version);
        }
        const v = version.startsWith("v") ? version.substr(1) : version;
        // 8 => v8.0.0
        if (/^\d+$/.test(v)) {
            return result(channel, `v${v}.0.0`);
        }
        // 8.1 => v8.1.0
        if (/^\d+\.\d+$/.test(v)) {
            return result(channel, `v${v}.0`);
        }
        // 8.1.2 => v8.1.2
        if (/^\d+\.\d+\.\d+$/.test(v)) {
            return result(channel, `v${v}`);
        }
        throw new Error(`Unable to resolve "${channel}/${version} into a valid Node.js version. Please use the "vX.Y.Z" version scheme.`);
    });
}
function resolve(version, remoteStorage) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!version) {
            throw new Error("Invalid version provided.");
        }
        const slash = version.indexOf("/");
        if (slash === -1) {
            return parseVersion("release", version, remoteStorage);
        }
        return parseVersion(version.slice(0, slash), version.slice(slash + 1), remoteStorage);
    });
}
exports.resolve = resolve;
//# sourceMappingURL=version_resolver.js.map